Python program is to run without interrupts if possible.
Program flow:
Add line to calibration file to status of calibration factors.  For a fresh file the value should be 0
For subsequent file writes it should be incremented by one to note that the factors have been updated and the number of times 
There could be more than one status value e.g. divider cal, offset cal, beam range etc.

Also need to set an interrupt for the BBB power down switch that saves the files and powers down the meter safely


For finding read line meter is tilted in cross and long directions and output is measured with pwm from 10 to 90 %
use numpy.py to find curve function.

Reading line is the first derivative  of this function.
Use sympy to calculate derivative 

Use Pyplot to show graph (matplotlib.org)

OLED:
https://luma-oled.readthedocs.io/en/latest/index.html     Luma.OLED: Display drivers for SSD1306 / SSD1322 / SSD1325 / SSD1331 / SH1106

http://www.4dsystems.com.au/product/4D_Workshop_4_IDE/

For new overlay system all pins are gpio.
Need to set them up with batch file first
config-pin P9.11 uart
config-pin P9.13 uart
etc

Batch file & execution:




Overlays
BB-I2C2-00A0.dts
cape_enable=bone_capemgr.enable_partno=/lib/firmware/BB-ADC
BB-PWM0-00A0.dts
BB-PWM1-00A0.dts
BB-SPIDEV0-00A0.dts
BB-SPIDEV1-00A0.dts
BB-UART1-00A0.dts

cape_enable=bone_capemgr.enable_partno=/lib/firmware/PyBBIO-gpio1_5
cape_enable=bone_capemgr.enable_partno=/lib/firmware/PyBBIO-gpio1_6
cape_enable=bone_capemgr.enable_partno=/lib/firmware/PyBBIO-gpio1_7
cape_enable=bone_capemgr.enable_partno=/lib/firmware/PyBBIO-gpio1_2
cape_enable=bone_capemgr.enable_partno=/lib/firmware/PyBBIO-gpio1_3



for I2C:  sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus -y



RTC
Address:  11010000  Write
          11010001  Read




Python program auto start:  https://www.engineersgarage.com/contribution/autorun-python-script-beaglebone-black-boot





Wifi info:
pip install python-wifi


PWM issue:
sudo apt-get update
sudo apt-get install build-essential git-core device-tree-compiler
git clone https://github.com/beagleboard/bb.org-overlays/
cd ./bb.org-overlays/
./install.sh
cd /opt/scripts/
git pull 
reboot


apt-get install python
apt-get install python-setuptools
sudo apt-get install python-pip
sudo apt-get install python-dev python3-dev
pip install Adafruit_BBIO
python bbio-test.py











1)  Read mode file
      Set mode
2)  Load calibration file
3)  Print menu


Program start:
  Enable DC-DC converters
  Init all devices (BBB)
    Verify system voltages
    (Board/ system test - later)
  Read cal file
  Report errors and write to log file
  
  Begin program loop:
  
  Check level
    Set levels flag (True or False)(Level or out of range)
    display cross and long levels
    
    if levels flag == True
      Start servo thread:
        Beam servo (loop 10 times)
        Display beam on OLED
        Adjust PWM
        (Later this will be PID loop)
   
   Check for communications
      Set flags for data reporting
   Check communications flags
   Get time
      if single reading flag set:
          if(beam is level):
              Send data
              clear flag
     if continuous reading flag is set:
        if it 1 Hz GPIO is set high:
          if(beam is level):
              Send data
              Clear GPIO flag
    if(time min counter is 10):
        Check system status/ voltages etc.
        Report errors and write to log file
        
        
PID:
https://github.com/ivmech/ivPID



tempList = [[94980, 0],[90410, 1],[86090, 2],[81990, 3],[78110, 4],[74440, 5],[70960, 6],[67660, 7],[64530, 8],[61560, 9],[58750, 10],[56070, 11],[53540, 12],[51130, 13],[48840, 14],[46670, 15],[44600, 16],[42640, 17],[40770, 18],[38990, 19],[37300, 20],[35700, 21],[34170, 22],[32710, 23],[31320, 24],[30000, 25],[28740, 26],[27540, 27],[26400, 28],[25310, 29],[24270, 30],[23280, 31],[22330, 32],[21430, 33],[20570, 34],[19740, 35],[18960, 36],[18210, 37],[17490, 38],[16800, 39],[16150, 40],[15520, 41],[14920, 42],[14350, 43],[13800, 44],[13280, 45],[12770, 46],[12290, 47],[11830, 48],[11390, 49],[10970, 50],[10570, 51],[10180, 52],[9807, 53],[9450, 54],[9109, 55],[8781, 56],[8467, 57],[8166, 58],[7876, 59],[7599, 60],[7332, 61],[7076, 62],[6830, 63],[6594, 64],[6367, 65],[6149, 66],[5940, 67],[5738, 68],[5545, 69],[5359, 70],[5180, 71],[5007, 72],[4842, 73],[4682, 74],[4529, 75],[4381, 76],[4239, 77],[4102, 78],[3970, 79],[3843, 80],[3720, 81],[3602, 82],[3489, 83],[3379, 84],[3273, 85],[3172, 86],[3073, 87],[2979, 88],[2887, 89],[2799, 90],[2714, 91],[2632, 92],[2552, 93],[2476, 94],[2402, 95],[2331, 96],[2262, 97],[2195, 98],[2131, 99],[2069, 100],[2009, 101],[1950, 102],[1894, 103],[1840, 104],[1788, 105],[1737, 106],[1688, 107],[1640, 108],[1594, 109],[1550, 110],[1507, 111],[1465, 112],[1425, 113],[1386, 114],[1348, 115],[1311, 116],[1276, 117],[1241, 118],[1208, 119],[1176, 120],[1145, 121],[1114, 122],[1085, 123],[1057, 124],[1029, 125],[1002, 126],[976.3, 127],[951.1, 128],[926.7, 129],[903, 130],[880, 131],[857.7, 132],[836.1, 133],[815, 134],[794.6, 135],[774.8, 136],[755.6, 137],[736.9, 138],[718.8, 139],[701.2, 140],[684.1, 141],[667.5, 142],[651.3, 143],[635.6, 144],[620.3, 145],[605.5, 146],[591.1, 147],[577.1, 148],[563.5, 149],[550.2, 150]]

http://rpyc.readthedocs.io/en/latest/ for multiple programs running at the same time
http://zeromq.org/

Threads in python:
https://www.tutorialspoint.com/python/python_multithreading.htm




Bash command file
# import subprocess
 


#!/usr/bin/env python 
import subprocess
from subprocess import Popen, PIPE
 
# s = "0"
# subprocess.check_output(["echo", "config-pin P8.5 high"])
# print("s = " + s)

# subprocess.call(["ls", "-l"])

# subprocess.call("config-pin P8.5 high")

process = Popen(['echo', 'config-pin P8.5 high'], stdout=PIPE, stderr=PIPE)
stdout, stderr = process.communicate()
print stdout


>>> import subprocess
>>> subprocess.call(['./test.sh']) # Thanks @Jim Dennis for suggesting the []

test.sh is the batch file
